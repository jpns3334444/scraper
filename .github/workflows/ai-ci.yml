name: AI Real Estate Analysis CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lambda/**'
      - 'infra/**' 
      - 'stepfunctions/**'
      - 'tests/**'
      - '.github/workflows/ai-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'lambda/**'
      - 'infra/**'
      - 'stepfunctions/**' 
      - 'tests/**'

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy pytest pytest-cov
        pip install -r tests/requirements.txt
        
        # Install Lambda function dependencies for type checking
        for lambda_dir in lambda/*/; do
          if [ -f "$lambda_dir/requirements.txt" ]; then
            pip install -r "$lambda_dir/requirements.txt"
          fi
        done

    - name: Lint with ruff
      run: |
        # Check for syntax errors and undefined names
        ruff check lambda/ tests/ --select=E9,F63,F7,F82
        
        # Full linting with exit code
        ruff check lambda/ tests/ --exit-non-zero-on-fix

    - name: Format check with ruff
      run: |
        ruff format lambda/ tests/ --check

    - name: Type checking with mypy
      run: |
        # Type check each Lambda function
        for lambda_dir in lambda/*/; do
          if [ -f "$lambda_dir/app.py" ]; then
            echo "Type checking $lambda_dir"
            mypy "$lambda_dir/app.py" --ignore-missing-imports --check-untyped-defs
          fi
        done

    - name: Run tests with pytest
      run: |
        pytest tests/ -v \
          --cov=lambda \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  validate-cloudformation:
    name: Validate CloudFormation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate CloudFormation template
      run: |
        aws cloudformation validate-template \
          --template-body file://infra/ai-stack.yaml

    - name: Lint CloudFormation with cfn-lint
      run: |
        pip install cfn-lint
        cfn-lint infra/ai-stack.yaml

  build-and-test-containers:
    name: Build and Test Docker Containers
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    strategy:
      matrix:
        function: [etl, prompt_builder, llm_batch, report_sender]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd lambda/${{ matrix.function }}
        docker build -t ai-scraper-${{ matrix.function }}:test .

    - name: Test Docker image
      run: |
        # Basic container test - ensure it starts without errors
        docker run --rm ai-scraper-${{ matrix.function }}:test python -c "import app; print('Import successful')"

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ai-scraper-${{ matrix.function }}:test
        format: 'sarif'
        output: trivy-results-${{ matrix.function }}.sarif

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-results-${{ matrix.function }}.sarif

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [lint-and-test, validate-cloudformation, build-and-test-containers]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install AWS SAM CLI
      run: |
        pip install aws-sam-cli

    - name: Build and deploy with SAM
      run: |
        cd infra
        
        # Build all Lambda functions
        sam build --template ai-stack.yaml --base-dir ..
        
        # Deploy to dev environment
        sam deploy \
          --template-file .aws-sam/build/template.yaml \
          --stack-name ai-scraper-dev \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
          --s3-prefix ai-scraper-dev \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            OpenAIAPIKey=${{ secrets.OPENAI_API_KEY_DEV }} \
            SlackHookURL=${{ secrets.SLACK_WEBHOOK_URL_DEV }} \
            EmailFrom=${{ secrets.EMAIL_FROM_DEV }} \
            EmailTo=${{ secrets.EMAIL_TO_DEV }} \
          --no-fail-on-empty-changeset \
          --region ${{ env.AWS_REGION }}

    - name: Run integration tests
      run: |
        # Test the deployed stack with a manual execution
        STACK_NAME="ai-scraper-dev"
        
        # Get Step Functions ARN
        STATE_MACHINE_ARN=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`StateMachineArn`].OutputValue' \
          --output text)
        
        # Start a test execution with yesterday's date (more likely to have data)
        YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)
        EXECUTION_ARN=$(aws stepfunctions start-execution \
          --state-machine-arn $STATE_MACHINE_ARN \
          --name "ci-test-$(date +%Y%m%d-%H%M%S)" \
          --input "{\"date\":\"$YESTERDAY\"}" \
          --query 'executionArn' \
          --output text)
        
        echo "Started test execution: $EXECUTION_ARN"
        
        # Wait for execution to complete (max 10 minutes)
        for i in {1..20}; do
          STATUS=$(aws stepfunctions describe-execution \
            --execution-arn $EXECUTION_ARN \
            --query 'status' \
            --output text)
          
          echo "Execution status: $STATUS"
          
          if [ "$STATUS" = "SUCCEEDED" ]; then
            echo "✅ Integration test passed"
            break
          elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "TIMED_OUT" ] || [ "$STATUS" = "ABORTED" ]; then
            echo "❌ Integration test failed with status: $STATUS"
            
            # Get failure details
            aws stepfunctions describe-execution \
              --execution-arn $EXECUTION_ARN \
              --query 'error'
            
            exit 1
          fi
          
          sleep 30
        done
        
        if [ "$STATUS" = "RUNNING" ]; then
          echo "⚠️ Integration test still running after 10 minutes, marking as passed"
        fi

    - name: Post deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ AI Scraper deployed successfully to development environment"
        else
          echo "❌ AI Scraper deployment to development failed"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r lambda/ -f json -o bandit-report.json || true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-report.json

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-test, validate-cloudformation, build-and-test-containers, deploy-dev]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send Slack notification on failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ai-scraper-alerts'
        text: '🔥 AI Scraper CI/CD pipeline failed on main branch'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}