AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Real Estate Analysis Stack - Simplified'

Parameters:
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda packages
  OutputBucket:
    Type: String
    Default: re-stock
    Description: S3 bucket for storing outputs
  EmailFrom:
    Type: String
    Default: noreply@example.com
    Description: From email address for SES notifications
  EmailTo:
    Type: String
    Default: admin@example.com
    Description: To email address for reports

Resources:
  # OpenAI Layer (built by deploy script)
  OpenAILayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-openai'
      Description: 'OpenAI SDK layer'
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/openai-layer.zip
      CompatibleRuntimes:
        - python3.12

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ai-scraper/openai-api-key-*'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  # Lambda Functions (using AWS prebuilt layers + our OpenAI layer)
  ETLFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-etl'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/etl.zip
      Timeout: 900
      MemorySize: 1024
      Layers:
        - arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python312:15
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket

  PromptBuilderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-prompt-builder'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/prompt_builder.zip
      Timeout: 900
      MemorySize: 1024
      Layers:
        - arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python312:15
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket

  LLMBatchFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-llm-batch'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/llm_batch.zip
      Timeout: 900
      MemorySize: 1024
      Layers:
        - arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python312:15
        - !Ref OpenAILayer
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket

  ReportSenderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-report-sender'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/report_sender.zip
      Timeout: 900
      MemorySize: 1024
      Layers:
        - arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python312:15
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket
          EMAIL_FROM: !Ref EmailFrom
          EMAIL_TO: !Ref EmailTo

  # Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ETLFunction.Arn
                  - !GetAtt PromptBuilderFunction.Arn
                  - !GetAtt LLMBatchFunction.Arn
                  - !GetAtt ReportSenderFunction.Arn

  AIAnalysisStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-ai-analysis'
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "AI analysis workflow for real estate listings",
          "StartAt": "ETL",
          "States": {
            "ETL": {
              "Type": "Task",
              "Resource": "${ETLFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Next": "PromptBuilder"
            },
            "PromptBuilder": {
              "Type": "Task",
              "Resource": "${PromptBuilderFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Next": "LLMBatch"
            },
            "LLMBatch": {
              "Type": "Task",
              "Resource": "${LLMBatchFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 60,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "Next": "ReportSender"
            },
            "ReportSender": {
              "Type": "Task",
              "Resource": "${ReportSenderFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        }

  # EventBridge rule for daily execution (optional)
  DailyAnalysisRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-daily-analysis'
      Description: 'Trigger AI analysis daily at 18:00 UTC (03:00 JST)'
      ScheduleExpression: 'cron(0 18 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Ref AIAnalysisStateMachine
          Id: 'AIAnalysisTarget'
          RoleArn: !GetAtt EventBridgeExecutionRole.Arn
          Input: !Sub |
            {
              "date": "$$.State.EnteredTime"
            }

  # EventBridge execution role
  EventBridgeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref AIAnalysisStateMachine

Outputs:
  StateMachineArn:
    Description: 'ARN of the Step Functions state machine'
    Value: !Ref AIAnalysisStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StateMachineArn'
  
  ETLFunctionArn:
    Description: 'ARN of the ETL Lambda function'
    Value: !GetAtt ETLFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ETLFunctionArn'

  OpenAILayerArn:
    Description: 'ARN of the OpenAI layer'
    Value: !Ref OpenAILayer
    Export:
      Name: !Sub '${AWS::StackName}-OpenAILayerArn'