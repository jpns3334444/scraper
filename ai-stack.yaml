AWSTemplateFormatVersion: '2010-09-09'
Description: AI Real Estate Analysis Stack - Simplified

Parameters:
  DeploymentBucket:
    Type: String
  OutputBucket:
    Type: String
    Default: tokyo-real-estate-ai-data
  EmailFrom:
    Type: String
  EmailTo:
    Type: String
  URLCollectorCodeVersion:
    Type: String
    Default: latest
  PropertyProcessorCodeVersion:
    Type: String
    Default: latest
  PropertyAnalyzerCodeVersion:
    Type: String
    Default: latest
  FavoriteAnalyzerCodeVersion:
    Type: String
    Default: latest
  OpenAILayerObjectVersion:
    Type: String
    Description: S3 object version ID for openai-layer.zip
  BcryptLayerObjectVersion:
    Type: String
    Description: S3 object version ID for bcrypt-layer.zip
    Default: latest
  LeanMode:
    Type: String
    Default: '1'
    AllowedValues: ['0', '1']
    Description: Enable LEAN_MODE for deterministic pipeline (1=enabled, 0=disabled)

Conditions:
  IsLeanModeEnabled: !Equals [!Ref LeanMode, '1']

Resources:
  OpenAILayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-openai'
      CompatibleRuntimes: [ python3.12 ]
      Description: OpenAI SDK layer
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/openai-layer.zip
        S3ObjectVersion: !Ref OpenAILayerObjectVersion

  BcryptLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-bcrypt'
      CompatibleRuntimes: [ python3.12 ]
      Description: Bcrypt password hashing layer
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/bcrypt-layer.zip
        S3ObjectVersion: !Ref BcryptLayerObjectVersion


  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ai-scraper/openai-api-key-*'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - ses:GetIdentityVerificationAttributes
                  - ses:GetSendQuota
                  - ses:GetSendStatistics
                Resource: '*'
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt RealEstateAnalysisDB.Arn
                  - !Sub '${RealEstateAnalysisDB.Arn}/index/*'
                  - !GetAtt UserPreferencesTable.Arn
                  - !Sub '${UserPreferencesTable.Arn}/index/*'
                  - !GetAtt UsersTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt URLCollectorDeadLetterQueue.Arn
                  - !GetAtt PropertyProcessorDeadLetterQueue.Arn
                  - !GetAtt PropertyAnalyzerDeadLetterQueue.Arn
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-favorite-analyzer'

  # Simplified IAM Role for URL collection and property processing functions
  ScraperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt RealEstateAnalysisDB.Arn
                  - !GetAtt URLTrackingDB.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt URLCollectorDeadLetterQueue.Arn
                  - !GetAtt PropertyProcessorDeadLetterQueue.Arn
                  - !GetAtt PropertyAnalyzerDeadLetterQueue.Arn

  # DynamoDB Table for Real Estate Analysis
  RealEstateAnalysisDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-analysis-db'  # Generates: tokyo-real-estate-ai-analysis-db
      AttributeDefinitions:
        - AttributeName: property_id
          AttributeType: S
        - AttributeName: sort_key
          AttributeType: S
        - AttributeName: district_key
          AttributeType: S
        - AttributeName: price_per_sqm
          AttributeType: N
        - AttributeName: invest_partition
          AttributeType: S
        - AttributeName: investment_score
          AttributeType: N
        - AttributeName: analysis_date
          AttributeType: S
      KeySchema:
        - AttributeName: property_id
          KeyType: HASH
        - AttributeName: sort_key
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: district-index
          KeySchema:
            - AttributeName: district_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: GSI_DIST_PPSQM
          KeySchema:
            - AttributeName: district_key
              KeyType: HASH
            - AttributeName: price_per_sqm
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - listing_url
              - price
              - total_sqm
              - num_bedrooms
              - building_age_years
              - station_distance_minutes
        - IndexName: GSI_INVEST
          KeySchema:
            - AttributeName: invest_partition
              KeyType: HASH
            - AttributeName: investment_score
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - listing_url
              - price
              - price_per_sqm
              - recommendation
              - district
              - total_sqm
        - IndexName: GSI_ANALYSIS_DATE
          KeySchema:
            - AttributeName: invest_partition
              KeyType: HASH
            - AttributeName: analysis_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for URL Tracking (DYDB2)
  URLTrackingDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-urls'  # Generates: tokyo-real-estate-ai-urls
      AttributeDefinitions:
        - AttributeName: url
          AttributeType: S
      KeySchema:
        - AttributeName: url
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # DynamoDB Table for Users (Authentication)
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-users'  # Generates: tokyo-real-estate-ai-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH

  UserPreferencesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-user-preferences'  # Generates: tokyo-real-estate-ai-user-preferences
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: property_id
          AttributeType: S
        - AttributeName: preference_type
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: property_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: user-type-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: preference_type
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Lambda Functions (using AWS prebuilt layers + our OpenAI layer)

  # URL Collector Lambda Function
  URLCollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-url-collector'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/url_collector.zip
        S3ObjectVersion: !Ref URLCollectorCodeVersion
      Timeout: 900  # 15 minutes for URL collection
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt URLCollectorDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB  # tokyo-real-estate-ai-analysis-db
          URL_TRACKING_TABLE: !Ref URLTrackingDB  # tokyo-real-estate-ai-urls
          MAX_CONCURRENT_AREAS: '5'
          AREAS: ''  # Empty = auto-detect all areas

  # Property Processor Lambda Function
  PropertyProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-property-processor'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/property_processor.zip
        S3ObjectVersion: !Ref PropertyProcessorCodeVersion
      Timeout: 900  # 15 minutes for property processing
      MemorySize: 2048
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt PropertyProcessorDeadLetterQueue.Arn
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB  # tokyo-real-estate-ai-analysis-db
          URL_TRACKING_TABLE: !Ref URLTrackingDB  # tokyo-real-estate-ai-urls
          MAX_PROPERTIES: '0'  # 0 = unlimited
          MAX_RUNTIME_MINUTES: '14'  # Stop before Lambda timeout

  # Property Analyzer Lambda Function
  PropertyAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-property-analyzer'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/property_analyzer.zip
        S3ObjectVersion: !Ref PropertyAnalyzerCodeVersion
      Timeout: 900  # 15 minutes for property analysis
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt PropertyAnalyzerDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB  # tokyo-real-estate-ai-analysis-db
          DAYS_BACK: '7'  # Analyze properties from last 7 days by default
          ANALYZE_ALL: 'false'  # Set to 'true' to analyze all properties




  # Favorite Analyzer Lambda Function
  FavoriteAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-favorite-analyzer'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/favorite_analyzer.zip
        S3ObjectVersion: !Ref FavoriteAnalyzerCodeVersion
      Timeout: 900  # 15 minutes for analysis
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
        - !Ref OpenAILayer
      Environment:
        Variables:
          PREFERENCES_TABLE: !Ref UserPreferencesTable  # tokyo-real-estate-ai-user-preferences
          PROPERTIES_TABLE: !Ref RealEstateAnalysisDB
          DATA_BUCKET: !Ref OutputBucket
          OPENAI_SECRET_NAME: ai-scraper/openai-api-key





  # Dead Letter Queues for Lambda functions

  URLCollectorDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-url-collector-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PropertyProcessorDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-property-processor-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PropertyAnalyzerDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-property-analyzer-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  # Step Functions Resources

  # IAM Role for Step Functions State Machine
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt URLCollectorFunction.Arn
                  - !GetAtt PropertyProcessorFunction.Arn
                  - !GetAtt PropertyAnalyzerFunction.Arn
        - PolicyName: StepFunctionsCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
        - PolicyName: StepFunctionsXRay
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'

  # CloudWatch Log Group for Step Functions
  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vendedlogs/states/${AWS::StackName}-pipeline'
      RetentionInDays: 7

  # Step Functions State Machine
  PropertyPipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-property-pipeline'
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      LoggingConfiguration:
        Level: ERROR
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      TracingConfiguration:
        Enabled: true
      DefinitionString: !Sub |
        {
          "Comment": "Property scraping and analysis pipeline",
          "StartAt": "GenerateSessionId",
          "States": {
            "GenerateSessionId": {
              "Type": "Pass",
              "Parameters": {
                "session_id.$": "States.Format('pipeline-{}', $$.Execution.StartTime)"
              },
              "ResultPath": "$.pipeline",
              "Next": "URLCollector"
            },
            "URLCollector": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${URLCollectorFunction.Arn}",
                "Payload": {
                  "session_id.$": "States.Format('url-collector-{}', $$.Execution.StartTime)",
                  "log_level": "INFO"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.url_collector_result",
              "Next": "CheckNewURLs"
            },
            "CheckNewURLs": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.url_collector_result.Payload.statusCode",
                  "NumericEquals": 200,
                  "Next": "PropertyProcessor"
                }
              ],
              "Default": "SkipToEnd"
            },
            "PropertyProcessor": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PropertyProcessorFunction.Arn}",
                "Payload": {
                  "session_id.$": "States.Format('property-processor-{}', $$.Execution.StartTime)",
                  "log_level": "INFO"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.property_processor_result",
              "Next": "PropertyAnalyzer"
            },
            "PropertyAnalyzer": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PropertyAnalyzerFunction.Arn}",
                "Payload": {
                  "session_id.$": "States.Format('property-analyzer-{}', $$.Execution.StartTime)",
                  "log_level": "INFO"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.property_analyzer_result",
              "Next": "Success"
            },
            "SkipToEnd": {
              "Type": "Pass",
              "Result": "URL collection failed or returned non-200 status, skipping processing",
              "ResultPath": "$.skip_reason",
              "Next": "Success"
            },
            "Success": {
              "Type": "Succeed"
            }
          }
        }

  # IAM Role for EventBridge to execute Step Functions
  EventBridgeStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartStepFunctions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref PropertyPipelineStateMachine

  # EventBridge Rule for hourly trigger
  HourlyPipelineTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-hourly-pipeline-trigger'
      Description: 'Trigger property pipeline every hour'
      ScheduleExpression: 'rate(1 hour)'
      State: ENABLED
      Targets:
        - Arn: !Ref PropertyPipelineStateMachine
          RoleArn: !GetAtt EventBridgeStepFunctionsRole.Arn
          Id: PropertyPipelineTarget
          Input: !Sub |
            {
              "trigger_type": "scheduled",
              "trigger_time": "${AWS::StackName}"
            }




Outputs:
  OpenAILayerArn:
    Description: 'ARN of the OpenAI layer'
    Value: !Ref OpenAILayer
    Export:
      Name: !Sub '${AWS::StackName}-OpenAILayerArn'

  BcryptLayerArn:
    Description: 'ARN of the Bcrypt layer'
    Value: !Ref BcryptLayer
    Export:
      Name: !Sub '${AWS::StackName}-BcryptLayerArn'

  DynamoDBTableArn:
    Description: 'ARN of the RealEstateAnalysisDB DynamoDB table'
    Value: !GetAtt RealEstateAnalysisDB.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableArn'

  DynamoDBTableName:
    Description: 'Name of the RealEstateAnalysisDB DynamoDB table'
    Value: !Ref RealEstateAnalysisDB
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'


  URLCollectorFunctionArn:
    Description: 'ARN of the URL Collector Lambda function'
    Value: !GetAtt URLCollectorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-URLCollectorFunctionArn'

  PropertyProcessorFunctionArn:
    Description: 'ARN of the Property Processor Lambda function'
    Value: !GetAtt PropertyProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PropertyProcessorFunctionArn'

  PropertyAnalyzerFunctionArn:
    Description: 'ARN of the Property Analyzer Lambda function'
    Value: !GetAtt PropertyAnalyzerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PropertyAnalyzerFunctionArn'


  FavoriteAnalyzerFunctionArn:
    Description: 'ARN of the Favorite Analyzer Lambda function'
    Value: !GetAtt FavoriteAnalyzerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FavoriteAnalyzerFunctionArn'

  
  URLTrackingDBArn:
    Description: 'ARN of the URL Tracking DynamoDB table'
    Value: !GetAtt URLTrackingDB.Arn
    Export:
      Name: !Sub '${AWS::StackName}-URLTrackingDBArn'

  URLTrackingDBName:
    Description: 'Name of the URL Tracking DynamoDB table'
    Value: !Ref URLTrackingDB
    Export:
      Name: !Sub '${AWS::StackName}-URLTrackingDBName'


  # Additional exports for frontend stack
  UserPreferencesTableName:
    Value: !Ref UserPreferencesTable
    Export:
      Name: !Sub "${AWS::StackName}-UserPreferencesTableName"
  
  UserPreferencesTableArn:
    Value: !GetAtt UserPreferencesTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserPreferencesTableArn"
  
  UsersTableName:
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableName"
  
  UsersTableArn:
    Value: !GetAtt UsersTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableArn"
  
  
  OutputBucketName:
    Value: !Ref OutputBucket
    Export:
      Name: !Sub "${AWS::StackName}-OutputBucketName"

  # Step Functions Outputs
  PropertyPipelineStateMachineArn:
    Description: 'ARN of the Property Pipeline Step Functions State Machine'
    Value: !Ref PropertyPipelineStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-PropertyPipelineStateMachineArn'

  PropertyPipelineStateMachineName:
    Description: 'Name of the Property Pipeline Step Functions State Machine'
    Value: !GetAtt PropertyPipelineStateMachine.Name
    Export:
      Name: !Sub '${AWS::StackName}-PropertyPipelineStateMachineName'

  HourlyPipelineTriggerArn:
    Description: 'ARN of the hourly EventBridge rule'
    Value: !GetAtt HourlyPipelineTrigger.Arn
    Export:
      Name: !Sub '${AWS::StackName}-HourlyPipelineTriggerArn'

  StepFunctionsLogGroupArn:
    Description: 'ARN of the Step Functions CloudWatch Log Group'
    Value: !GetAtt StepFunctionsLogGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-StepFunctionsLogGroupArn'