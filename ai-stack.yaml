AWSTemplateFormatVersion: '2010-09-09'
Description: AI Real Estate Analysis Stack - Simplified

Parameters:
  DeploymentBucket:
    Type: String
  OutputBucket:
    Type: String
    Default: tokyo-real-estate-ai-data
  EmailFrom:
    Type: String
  EmailTo:
    Type: String
  DashboardAPICodeVersion:
    Type: String
    Default: latest
  URLCollectorCodeVersion:
    Type: String
    Default: latest
  PropertyProcessorCodeVersion:
    Type: String
    Default: latest
  PropertyAnalyzerCodeVersion:
    Type: String
    Default: latest
  FavoritesAPICodeVersion:
    Type: String
    Default: latest
  FavoriteAnalyzerCodeVersion:
    Type: String
    Default: latest
  RegisterUserCodeVersion:
    Type: String
    Default: latest
  LoginUserCodeVersion:
    Type: String
    Default: latest
  OpenAILayerObjectVersion:
    Type: String
    Description: S3 object version ID for openai-layer.zip
  BcryptLayerObjectVersion:
    Type: String
    Description: S3 object version ID for bcrypt-layer.zip
    Default: latest
  LeanMode:
    Type: String
    Default: '1'
    AllowedValues: ['0', '1']
    Description: Enable LEAN_MODE for deterministic pipeline (1=enabled, 0=disabled)

Conditions:
  IsLeanModeEnabled: !Equals [!Ref LeanMode, '1']

Resources:
  OpenAILayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-openai'
      CompatibleRuntimes: [ python3.12 ]
      Description: OpenAI SDK layer
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/openai-layer.zip
        S3ObjectVersion: !Ref OpenAILayerObjectVersion

  BcryptLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-bcrypt'
      CompatibleRuntimes: [ python3.12 ]
      Description: Bcrypt password hashing layer
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/bcrypt-layer.zip
        S3ObjectVersion: !Ref BcryptLayerObjectVersion

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ai-scraper/openai-api-key-*'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - ses:GetIdentityVerificationAttributes
                  - ses:GetSendQuota
                  - ses:GetSendStatistics
                Resource: '*'
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt RealEstateAnalysisDB.Arn
                  - !Sub '${RealEstateAnalysisDB.Arn}/index/*'
                  - !GetAtt UserPreferencesTable.Arn
                  - !Sub '${UserPreferencesTable.Arn}/index/*'
                  - !GetAtt UsersTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt DashboardAPIDeadLetterQueue.Arn
                  - !GetAtt URLCollectorDeadLetterQueue.Arn
                  - !GetAtt PropertyProcessorDeadLetterQueue.Arn
                  - !GetAtt PropertyAnalyzerDeadLetterQueue.Arn
                  - !GetAtt FavoriteAnalysisQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt FavoriteAnalysisQueue.Arn

  # Simplified IAM Role for URL collection and property processing functions
  ScraperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt RealEstateAnalysisDB.Arn
                  - !GetAtt URLTrackingDB.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt URLCollectorDeadLetterQueue.Arn
                  - !GetAtt PropertyProcessorDeadLetterQueue.Arn
                  - !GetAtt PropertyAnalyzerDeadLetterQueue.Arn

  # DynamoDB Table for Real Estate Analysis
  RealEstateAnalysisDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-analysis-db'
      AttributeDefinitions:
        - AttributeName: property_id
          AttributeType: S
        - AttributeName: sort_key
          AttributeType: S
        - AttributeName: district_key
          AttributeType: S
        - AttributeName: price_per_sqm
          AttributeType: N
        - AttributeName: invest_partition
          AttributeType: S
        - AttributeName: investment_score
          AttributeType: N
        - AttributeName: analysis_date
          AttributeType: S
      KeySchema:
        - AttributeName: property_id
          KeyType: HASH
        - AttributeName: sort_key
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: district-index
          KeySchema:
            - AttributeName: district_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: GSI_DIST_PPSQM
          KeySchema:
            - AttributeName: district_key
              KeyType: HASH
            - AttributeName: price_per_sqm
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - listing_url
              - price
              - total_sqm
              - num_bedrooms
              - building_age_years
              - station_distance_minutes
        - IndexName: GSI_INVEST
          KeySchema:
            - AttributeName: invest_partition
              KeyType: HASH
            - AttributeName: investment_score
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - listing_url
              - price
              - price_per_sqm
              - recommendation
              - district
              - total_sqm
        - IndexName: GSI_ANALYSIS_DATE
          KeySchema:
            - AttributeName: invest_partition
              KeyType: HASH
            - AttributeName: analysis_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for URL Tracking (DYDB2)
  URLTrackingDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-urls'
      AttributeDefinitions:
        - AttributeName: url
          AttributeType: S
      KeySchema:
        - AttributeName: url
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # DynamoDB Table for Users (Authentication)
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH

  # DynamoDB Table for User Preferences (Favorites and Hidden)
  UserPreferencesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-user-preferences'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: preference_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: property_id
          AttributeType: S
        - AttributeName: preference_type
          AttributeType: S
      KeySchema:
        - AttributeName: preference_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-preferences-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: property-preferences-index
          KeySchema:
            - AttributeName: property_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: user-type-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: preference_type
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Lambda Functions (using AWS prebuilt layers + our OpenAI layer)
  # Dashboard API Function
  DashboardAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-dashboard-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/dashboard_api.zip
        S3ObjectVersion: !Ref DashboardAPICodeVersion
      Timeout: 30  # API Gateway timeout limit
      MemorySize: 512
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt DashboardAPIDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          PREFERENCES_TABLE: !Ref UserPreferencesTable

  # URL Collector Lambda Function
  URLCollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-url-collector'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/url_collector.zip
        S3ObjectVersion: !Ref URLCollectorCodeVersion
      Timeout: 900  # 15 minutes for URL collection
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt URLCollectorDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          URL_TRACKING_TABLE: !Ref URLTrackingDB
          MAX_CONCURRENT_AREAS: '5'
          AREAS: ''  # Empty = auto-detect all areas

  # Property Processor Lambda Function
  PropertyProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-property-processor'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/property_processor.zip
        S3ObjectVersion: !Ref PropertyProcessorCodeVersion
      Timeout: 900  # 15 minutes for property processing
      MemorySize: 2048
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt PropertyProcessorDeadLetterQueue.Arn
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          URL_TRACKING_TABLE: !Ref URLTrackingDB
          MAX_PROPERTIES: '0'  # 0 = unlimited
          MAX_RUNTIME_MINUTES: '14'  # Stop before Lambda timeout

  # Property Analyzer Lambda Function
  PropertyAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-property-analyzer'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/property_analyzer.zip
        S3ObjectVersion: !Ref PropertyAnalyzerCodeVersion
      Timeout: 900  # 15 minutes for property analysis
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt PropertyAnalyzerDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          DAYS_BACK: '7'  # Analyze properties from last 7 days by default
          ANALYZE_ALL: 'false'  # Set to 'true' to analyze all properties

  # Favorites API Lambda Function
  FavoritesAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-favorites-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/favorites_api.zip
        S3ObjectVersion: !Ref FavoritesAPICodeVersion
      Timeout: 30  # API Gateway timeout limit
      MemorySize: 512
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      Environment:
        Variables:
          PREFERENCES_TABLE: !Ref UserPreferencesTable
          PROPERTIES_TABLE: !Ref RealEstateAnalysisDB
          ANALYSIS_QUEUE_URL: !Ref FavoriteAnalysisQueue
          OUTPUT_BUCKET: !Ref OutputBucket

  # Register User Lambda Function
  RegisterUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-register-user'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/register_user.zip
        S3ObjectVersion: !Ref RegisterUserCodeVersion
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Ref BcryptLayer
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  # Login User Lambda Function
  LoginUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-login-user'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/login_user.zip
        S3ObjectVersion: !Ref LoginUserCodeVersion
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Ref BcryptLayer
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  # Favorite Analyzer Lambda Function
  FavoriteAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-favorite-analyzer'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/favorite_analyzer.zip
        S3ObjectVersion: !Ref FavoriteAnalyzerCodeVersion
      Timeout: 900  # 15 minutes for analysis
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
        - !Ref OpenAILayer
      Environment:
        Variables:
          PREFERENCES_TABLE: !Ref UserPreferencesTable
          PROPERTIES_TABLE: !Ref RealEstateAnalysisDB
          DATA_BUCKET: !Ref OutputBucket
          OPENAI_SECRET_NAME: ai-scraper/openai-api-key

  # Event Source Mapping for Favorite Analyzer
  FavoriteAnalyzerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt FavoriteAnalysisQueue.Arn
      FunctionName: !GetAtt FavoriteAnalyzerFunction.Arn
      BatchSize: 1

  # Dead Letter Queues for Lambda functions
  DashboardAPIDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-dashboard-api-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  URLCollectorDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-url-collector-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PropertyProcessorDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-property-processor-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PropertyAnalyzerDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-property-analyzer-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue for Favorite Analysis Processing
  FavoriteAnalysisQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-favorite-analysis'
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FavoriteAnalysisDLQ.Arn
        maxReceiveCount: 3

  FavoriteAnalysisDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-favorite-analysis-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  # Unified REST API Gateway for all endpoints
  UnifiedRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: 'Unified REST API for Real Estate Application'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # REST API Deployment
  UnifiedApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PropertiesMethod
      - PropertiesOptionsMethod
      - FavoritesPostMethod
      - FavoritesOptionsMethod
      - FavoritesGetMethod
      - FavoritesUserOptionsMethod
      - FavoritesDeleteMethod
      - FavoritesDeleteOptionsMethod
      - HiddenPostMethod
      - HiddenOptionsMethod
      - HiddenGetMethod
      - HiddenUserOptionsMethod
      - HiddenDeleteMethod
      - HiddenDeleteOptionsMethod
      - AuthRegisterMethod
      - AuthRegisterOptionsMethod
      - AuthLoginMethod
      - AuthLoginOptionsMethod
    Properties:
      RestApiId: !Ref UnifiedRestApi
      Description: 'Unified API Deployment'

  # REST API Stage
  UnifiedApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref UnifiedRestApi
      DeploymentId: !Ref UnifiedApiDeployment
      StageName: 'prod'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50

  # Gateway Responses for CORS on errors
  GatewayResponse4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"

  GatewayResponse5xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"

  # /properties resource
  PropertiesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !GetAtt UnifiedRestApi.RootResourceId
      PathPart: 'properties'

  PropertiesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref PropertiesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardAPIFunction.Arn}/invocations'

  PropertiesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref PropertiesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /favorites resource
  FavoritesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !GetAtt UnifiedRestApi.RootResourceId
      PathPart: 'favorites'

  FavoritesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref FavoritesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref FavoritesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /favorites/user/{userId} resource
  FavoritesUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref FavoritesResource
      PathPart: 'user'

  FavoritesUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref FavoritesUserResource
      PathPart: '{userId}'

  FavoritesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref FavoritesUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesUserOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref FavoritesUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /favorites/{id} resource for DELETE
  FavoritesIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref FavoritesResource
      PathPart: '{id}'

  FavoritesDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref FavoritesIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesDeleteOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref FavoritesIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /hidden resource
  HiddenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !GetAtt UnifiedRestApi.RootResourceId
      PathPart: 'hidden'

  HiddenPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref HiddenResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  HiddenOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref HiddenResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /hidden/user/{userId} resource
  HiddenUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref HiddenResource
      PathPart: 'user'

  HiddenUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref HiddenUserResource
      PathPart: '{userId}'

  HiddenGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref HiddenUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  HiddenUserOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref HiddenUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /hidden/{id} resource for DELETE
  HiddenIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref HiddenResource
      PathPart: '{id}'

  HiddenDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref HiddenIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  HiddenDeleteOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref HiddenIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /auth resource
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !GetAtt UnifiedRestApi.RootResourceId
      PathPart: 'auth'

  # /auth/register resource
  AuthRegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref AuthResource
      PathPart: 'register'

  AuthRegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref AuthRegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserFunction.Arn}/invocations'

  AuthRegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref AuthRegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /auth/login resource
  AuthLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ParentId: !Ref AuthResource
      PathPart: 'login'

  AuthLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUserFunction.Arn}/invocations'

  AuthLoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UnifiedRestApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-Id,X-User-Email'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permissions for Unified REST API Gateway
  DashboardApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UnifiedRestApi}/*/*'

  RegisterApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RegisterUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UnifiedRestApi}/*/*'

  LoginApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoginUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UnifiedRestApi}/*/*'

  FavoritesApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FavoritesAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UnifiedRestApi}/*/*'

Outputs:
  OpenAILayerArn:
    Description: 'ARN of the OpenAI layer'
    Value: !Ref OpenAILayer
    Export:
      Name: !Sub '${AWS::StackName}-OpenAILayerArn'

  DynamoDBTableArn:
    Description: 'ARN of the RealEstateAnalysisDB DynamoDB table'
    Value: !GetAtt RealEstateAnalysisDB.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableArn'

  DynamoDBTableName:
    Description: 'Name of the RealEstateAnalysisDB DynamoDB table'
    Value: !Ref RealEstateAnalysisDB
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  DashboardAPIFunctionArn:
    Description: 'ARN of the Dashboard API Lambda function'
    Value: !GetAtt DashboardAPIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DashboardAPIFunctionArn'

  DashboardAPIFunctionName:
    Description: 'Name of the Dashboard API Lambda function'
    Value: !Ref DashboardAPIFunction
    Export:
      Name: !Sub '${AWS::StackName}-DashboardAPIFunctionName'

  URLCollectorFunctionArn:
    Description: 'ARN of the URL Collector Lambda function'
    Value: !GetAtt URLCollectorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-URLCollectorFunctionArn'

  PropertyProcessorFunctionArn:
    Description: 'ARN of the Property Processor Lambda function'
    Value: !GetAtt PropertyProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PropertyProcessorFunctionArn'

  PropertyAnalyzerFunctionArn:
    Description: 'ARN of the Property Analyzer Lambda function'
    Value: !GetAtt PropertyAnalyzerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PropertyAnalyzerFunctionArn'

  FavoritesAPIFunctionArn:
    Description: 'ARN of the Favorites API Lambda function'
    Value: !GetAtt FavoritesAPIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FavoritesAPIFunctionArn'

  FavoriteAnalyzerFunctionArn:
    Description: 'ARN of the Favorite Analyzer Lambda function'
    Value: !GetAtt FavoriteAnalyzerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FavoriteAnalyzerFunctionArn'

  UnifiedRestApiEndpoint:
    Description: 'Endpoint URL for the Unified REST API'
    Value: !Sub 'https://${UnifiedRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-UnifiedRestApiEndpoint'

  UnifiedRestApiId:
    Description: 'ID of the Unified REST API'
    Value: !Ref UnifiedRestApi
    Export:
      Name: !Sub '${AWS::StackName}-UnifiedRestApiId'
  
  URLTrackingDBArn:
    Description: 'ARN of the URL Tracking DynamoDB table'
    Value: !GetAtt URLTrackingDB.Arn
    Export:
      Name: !Sub '${AWS::StackName}-URLTrackingDBArn'

  URLTrackingDBName:
    Description: 'Name of the URL Tracking DynamoDB table'
    Value: !Ref URLTrackingDB
    Export:
      Name: !Sub '${AWS::StackName}-URLTrackingDBName'

  RegisterUserFunctionArn:
    Description: 'ARN of the Register User Lambda function'
    Value: !GetAtt RegisterUserFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RegisterUserFunctionArn'

  LoginUserFunctionArn:
    Description: 'ARN of the Login User Lambda function'
    Value: !GetAtt LoginUserFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LoginUserFunctionArn'