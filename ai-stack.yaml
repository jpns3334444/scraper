AWSTemplateFormatVersion: '2010-09-09'
Description: AI Real Estate Analysis Stack - Simplified

Parameters:
  DeploymentBucket:
    Type: String
  OutputBucket:
    Type: String
    Default: tokyo-real-estate-ai-data
  EmailFrom:
    Type: String
  EmailTo:
    Type: String
  DashboardAPICodeVersion:
    Type: String
    Default: latest
  URLCollectorCodeVersion:
    Type: String
    Default: latest
  PropertyProcessorCodeVersion:
    Type: String
    Default: latest
  PropertyAnalyzerCodeVersion:
    Type: String
    Default: latest
  FavoritesAPICodeVersion:
    Type: String
    Default: latest
  FavoriteAnalyzerCodeVersion:
    Type: String
    Default: latest
  OpenAILayerObjectVersion:
    Type: String
    Description: S3 object version ID for openai-layer.zip
  LeanMode:
    Type: String
    Default: '1'
    AllowedValues: ['0', '1']
    Description: Enable LEAN_MODE for deterministic pipeline (1=enabled, 0=disabled)

Conditions:
  IsLeanModeEnabled: !Equals [!Ref LeanMode, '1']

Resources:
  OpenAILayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-openai'
      CompatibleRuntimes: [ python3.12 ]
      Description: OpenAI SDK layer
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/openai-layer.zip
        S3ObjectVersion: !Ref OpenAILayerObjectVersion

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ai-scraper/openai-api-key-*'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - ses:GetIdentityVerificationAttributes
                  - ses:GetSendQuota
                  - ses:GetSendStatistics
                Resource: '*'
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt RealEstateAnalysisDB.Arn
                  - !Sub '${RealEstateAnalysisDB.Arn}/index/*'
                  - !GetAtt UserFavoritesTable.Arn
                  - !Sub '${UserFavoritesTable.Arn}/index/*'
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt DashboardAPIDeadLetterQueue.Arn
                  - !GetAtt URLCollectorDeadLetterQueue.Arn
                  - !GetAtt PropertyProcessorDeadLetterQueue.Arn
                  - !GetAtt PropertyAnalyzerDeadLetterQueue.Arn
                  - !GetAtt FavoriteAnalysisQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt FavoriteAnalysisQueue.Arn

  # Simplified IAM Role for URL collection and property processing functions
  ScraperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt RealEstateAnalysisDB.Arn
                  - !GetAtt URLTrackingDB.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt URLCollectorDeadLetterQueue.Arn
                  - !GetAtt PropertyProcessorDeadLetterQueue.Arn
                  - !GetAtt PropertyAnalyzerDeadLetterQueue.Arn

  # DynamoDB Table for Real Estate Analysis
  RealEstateAnalysisDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-analysis-db'
      AttributeDefinitions:
        - AttributeName: property_id
          AttributeType: S
        - AttributeName: sort_key
          AttributeType: S
        - AttributeName: district_key
          AttributeType: S
        - AttributeName: price_per_sqm
          AttributeType: N
        - AttributeName: invest_partition
          AttributeType: S
        - AttributeName: investment_score
          AttributeType: N
        - AttributeName: analysis_date
          AttributeType: S
      KeySchema:
        - AttributeName: property_id
          KeyType: HASH
        - AttributeName: sort_key
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: district-index
          KeySchema:
            - AttributeName: district_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: GSI_DIST_PPSQM
          KeySchema:
            - AttributeName: district_key
              KeyType: HASH
            - AttributeName: price_per_sqm
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - listing_url
              - price
              - total_sqm
              - num_bedrooms
              - building_age_years
              - station_distance_minutes
        - IndexName: GSI_INVEST
          KeySchema:
            - AttributeName: invest_partition
              KeyType: HASH
            - AttributeName: investment_score
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - listing_url
              - price
              - price_per_sqm
              - recommendation
              - district
              - total_sqm
        - IndexName: GSI_ANALYSIS_DATE
          KeySchema:
            - AttributeName: invest_partition
              KeyType: HASH
            - AttributeName: analysis_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for URL Tracking (DYDB2)
  URLTrackingDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-urls'
      AttributeDefinitions:
        - AttributeName: url
          AttributeType: S
      KeySchema:
        - AttributeName: url
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # DynamoDB Table for User Favorites
  UserFavoritesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-user-favorites'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: favorite_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: favorited_at
          AttributeType: S
        - AttributeName: property_id
          AttributeType: S
      KeySchema:
        - AttributeName: favorite_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-favorites-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: favorited_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: property-favorites-index
          KeySchema:
            - AttributeName: property_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Functions (using AWS prebuilt layers + our OpenAI layer)
  # Dashboard API Function
  DashboardAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-dashboard-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/dashboard_api.zip
        S3ObjectVersion: !Ref DashboardAPICodeVersion
      Timeout: 30  # API Gateway timeout limit
      MemorySize: 512
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt DashboardAPIDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          FAVORITES_TABLE: !Ref UserFavoritesTable

  # URL Collector Lambda Function
  URLCollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-url-collector'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/url_collector.zip
        S3ObjectVersion: !Ref URLCollectorCodeVersion
      Timeout: 900  # 15 minutes for URL collection
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt URLCollectorDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          URL_TRACKING_TABLE: !Ref URLTrackingDB
          MAX_CONCURRENT_AREAS: '5'
          AREAS: ''  # Empty = auto-detect all areas

  # Property Processor Lambda Function
  PropertyProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-property-processor'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/property_processor.zip
        S3ObjectVersion: !Ref PropertyProcessorCodeVersion
      Timeout: 900  # 15 minutes for property processing
      MemorySize: 2048
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt PropertyProcessorDeadLetterQueue.Arn
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          URL_TRACKING_TABLE: !Ref URLTrackingDB
          MAX_PROPERTIES: '0'  # 0 = unlimited
          MAX_RUNTIME_MINUTES: '14'  # Stop before Lambda timeout

  # Property Analyzer Lambda Function
  PropertyAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-property-analyzer'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt ScraperExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/property_analyzer.zip
        S3ObjectVersion: !Ref PropertyAnalyzerCodeVersion
      Timeout: 900  # 15 minutes for property analysis
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      DeadLetterConfig:
        TargetArn: !GetAtt PropertyAnalyzerDeadLetterQueue.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref RealEstateAnalysisDB
          DAYS_BACK: '7'  # Analyze properties from last 7 days by default
          ANALYZE_ALL: 'false'  # Set to 'true' to analyze all properties

  # Favorites API Lambda Function
  FavoritesAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-favorites-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/favorites_api.zip
        S3ObjectVersion: !Ref FavoritesAPICodeVersion
      Timeout: 30  # API Gateway timeout limit
      MemorySize: 512
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      Environment:
        Variables:
          FAVORITES_TABLE: !Ref UserFavoritesTable
          PROPERTIES_TABLE: !Ref RealEstateAnalysisDB
          ANALYSIS_QUEUE_URL: !Ref FavoriteAnalysisQueue
          OUTPUT_BUCKET: !Ref OutputBucket

  # Favorite Analyzer Lambda Function
  FavoriteAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-favorite-analyzer'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/favorite_analyzer.zip
        S3ObjectVersion: !Ref FavoriteAnalyzerCodeVersion
      Timeout: 900  # 15 minutes for analysis
      MemorySize: 1024
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
        - !Ref OpenAILayer
      Environment:
        Variables:
          FAVORITES_TABLE: !Ref UserFavoritesTable
          PROPERTIES_TABLE: !Ref RealEstateAnalysisDB
          DATA_BUCKET: !Ref OutputBucket
          OPENAI_SECRET_NAME: ai-scraper/openai-api-key

  # Event Source Mapping for Favorite Analyzer
  FavoriteAnalyzerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt FavoriteAnalysisQueue.Arn
      FunctionName: !GetAtt FavoriteAnalyzerFunction.Arn
      BatchSize: 1

  # Dead Letter Queues for Lambda functions
  DashboardAPIDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-dashboard-api-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  URLCollectorDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-url-collector-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PropertyProcessorDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-property-processor-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  PropertyAnalyzerDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-property-analyzer-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue for Favorite Analysis Processing
  FavoriteAnalysisQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-favorite-analysis'
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FavoriteAnalysisDLQ.Arn
        maxReceiveCount: 3

  FavoriteAnalysisDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-favorite-analysis-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  # HTTP API Gateway for Favorites
  FavoritesHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-favorites-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
          - X-User-Id
        AllowMethods:
          - GET
          - POST
          - DELETE
          - OPTIONS
        AllowOrigins:
          - '*'

  # Lambda integration for Favorites API
  FavoritesApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref FavoritesHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # Routes for Favorites API
  PostFavoritesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FavoritesHttpApi
      RouteKey: 'POST /favorites'
      Target: !Sub 'integrations/${FavoritesApiIntegration}'

  GetUserFavoritesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FavoritesHttpApi
      RouteKey: 'GET /favorites/{userId}'
      Target: !Sub 'integrations/${FavoritesApiIntegration}'

  DeleteFavoriteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FavoritesHttpApi
      RouteKey: 'DELETE /favorites/{id}'
      Target: !Sub 'integrations/${FavoritesApiIntegration}'

  # API Gateway Stage
  FavoritesApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref FavoritesHttpApi
      StageName: 'prod'
      AutoDeploy: true

  # Lambda permission for API Gateway
  FavoritesApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FavoritesAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FavoritesHttpApi}/*/*'

Outputs:
  OpenAILayerArn:
    Description: 'ARN of the OpenAI layer'
    Value: !Ref OpenAILayer
    Export:
      Name: !Sub '${AWS::StackName}-OpenAILayerArn'

  DynamoDBTableArn:
    Description: 'ARN of the RealEstateAnalysisDB DynamoDB table'
    Value: !GetAtt RealEstateAnalysisDB.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableArn'

  DynamoDBTableName:
    Description: 'Name of the RealEstateAnalysisDB DynamoDB table'
    Value: !Ref RealEstateAnalysisDB
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  DashboardAPIFunctionArn:
    Description: 'ARN of the Dashboard API Lambda function'
    Value: !GetAtt DashboardAPIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DashboardAPIFunctionArn'

  DashboardAPIFunctionName:
    Description: 'Name of the Dashboard API Lambda function'
    Value: !Ref DashboardAPIFunction
    Export:
      Name: !Sub '${AWS::StackName}-DashboardAPIFunctionName'

  URLCollectorFunctionArn:
    Description: 'ARN of the URL Collector Lambda function'
    Value: !GetAtt URLCollectorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-URLCollectorFunctionArn'

  PropertyProcessorFunctionArn:
    Description: 'ARN of the Property Processor Lambda function'
    Value: !GetAtt PropertyProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PropertyProcessorFunctionArn'

  PropertyAnalyzerFunctionArn:
    Description: 'ARN of the Property Analyzer Lambda function'
    Value: !GetAtt PropertyAnalyzerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PropertyAnalyzerFunctionArn'

  FavoritesAPIFunctionArn:
    Description: 'ARN of the Favorites API Lambda function'
    Value: !GetAtt FavoritesAPIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FavoritesAPIFunctionArn'

  FavoriteAnalyzerFunctionArn:
    Description: 'ARN of the Favorite Analyzer Lambda function'
    Value: !GetAtt FavoriteAnalyzerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FavoriteAnalyzerFunctionArn'

  FavoritesHttpApiEndpoint:
    Description: 'Endpoint URL for the Favorites HTTP API'
    Value: !Sub 'https://${FavoritesHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-FavoritesHttpApiEndpoint'
  
  URLTrackingDBArn:
    Description: 'ARN of the URL Tracking DynamoDB table'
    Value: !GetAtt URLTrackingDB.Arn
    Export:
      Name: !Sub '${AWS::StackName}-URLTrackingDBArn'

  URLTrackingDBName:
    Description: 'Name of the URL Tracking DynamoDB table'
    Value: !Ref URLTrackingDB
    Export:
      Name: !Sub '${AWS::StackName}-URLTrackingDBName'