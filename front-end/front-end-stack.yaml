AWSTemplateFormatVersion: "2010-09-09"
Description: "Tokyo Real Estate Frontend - Following AI Stack Pattern"

Parameters:
  AIStackName:
    Type: String
    Default: "tokyo-real-estate-ai"
    Description: "Name of the AI stack to import resources from"
    
  DeploymentBucket:
    Type: String
    Description: "S3 bucket containing Lambda deployment packages and layers"
    
  DashboardAPICodeVersion:
    Type: String
    Default: latest
    Description: "S3 object version for dashboard API function"
    
  FavoritesAPICodeVersion:
    Type: String
    Default: latest
    Description: "S3 object version for favorites API function"
    
  RegisterUserCodeVersion:
    Type: String
    Default: latest
    Description: "S3 object version for register user function"
    
  LoginUserCodeVersion:
    Type: String
    Default: latest
    Description: "S3 object version for login user function"
    
  BcryptLayerObjectVersion:
    Type: String
    Description: "S3 object version ID for frontend-bcrypt-layer.zip"
    Default: latest

Resources:
  # S3 Bucket for Static Website
  StaticSiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::StackName}-static-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "HEAD", "PUT", "POST", "DELETE"]
            AllowedOrigins: ["*"]
            MaxAge: 3600

  # S3 Bucket Policy for Public Read Access
  StaticSiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "PublicReadGetObject"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${StaticSiteBucket.Arn}/*"

  # Bcrypt Layer for authentication functions (using S3 version like AI stack)
  BcryptLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-bcrypt'
      CompatibleRuntimes: [ python3.12 ]
      Description: Bcrypt password hashing layer
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: layers/frontend-bcrypt-layer.zip
        S3ObjectVersion: !Ref BcryptLayerObjectVersion

  # IAM Role for Lambda functions (matching AI stack pattern)
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "DynamoDBAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:DescribeTable"
                Resource:
                  - Fn::ImportValue: !Sub "${AIStackName}-DynamoDBTableArn"
                  - Fn::ImportValue: !Sub "${AIStackName}-UserPreferencesTableArn"
                  - Fn::ImportValue: !Sub "${AIStackName}-UsersTableArn"
                  - !Sub 
                    - "${TableArn}/index/*"
                    - TableArn: 
                        Fn::ImportValue: !Sub "${AIStackName}-DynamoDBTableArn"
                  - !Sub 
                    - "${TableArn}/index/*"
                    - TableArn: 
                        Fn::ImportValue: !Sub "${AIStackName}-UserPreferencesTableArn"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${StaticSiteBucket}/*"
                  - !Sub 
                    - "arn:aws:s3:::${BucketName}/*"
                    - BucketName:
                        Fn::ImportValue: !Sub "${AIStackName}-OutputBucketName"
        - PolicyName: "LambdaInvokeAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AIStackName}-favorite-analyzer"

  # Lambda Functions (following AI stack pattern with S3 versioning)

  # Dashboard API Lambda Function
  DashboardAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-dashboard-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: frontend-functions/dashboard_api.zip
        S3ObjectVersion: !Ref DashboardAPICodeVersion
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      Environment:
        Variables:
          DYNAMODB_TABLE:  # Will resolve to: tokyo-real-estate-ai-analysis-db
            Fn::ImportValue: !Sub "${AIStackName}-DynamoDBTableName"
          PREFERENCES_TABLE:  # Will resolve to: tokyo-real-estate-ai-user-preferences
            Fn::ImportValue: !Sub "${AIStackName}-UserPreferencesTableName"

  # Favorites API Lambda Function
  FavoritesAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-favorites-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: frontend-functions/favorites_api.zip
        S3ObjectVersion: !Ref FavoritesAPICodeVersion
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:15'
      Environment:
        Variables:
          PREFERENCES_TABLE:  # Will resolve to: tokyo-real-estate-ai-user-preferences
            Fn::ImportValue: !Sub "${AIStackName}-UserPreferencesTableName"
          PROPERTIES_TABLE:
            Fn::ImportValue: !Sub "${AIStackName}-DynamoDBTableName"
          OUTPUT_BUCKET:
            Fn::ImportValue: !Sub "${AIStackName}-OutputBucketName"
          FAVORITE_ANALYZER_FUNCTION: !Sub '${AIStackName}-favorite-analyzer'

  # Register User Lambda Function
  RegisterUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-register-user'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: frontend-functions/register_user.zip
        S3ObjectVersion: !Ref RegisterUserCodeVersion
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Ref BcryptLayer
      Environment:
        Variables:
          USERS_TABLE:  # Will resolve to: tokyo-real-estate-ai-users
            Fn::ImportValue: !Sub "${AIStackName}-UsersTableName"

  # Login User Lambda Function
  LoginUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-login-user'
      Runtime: python3.12
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: frontend-functions/login_user.zip
        S3ObjectVersion: !Ref LoginUserCodeVersion
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Ref BcryptLayer
      Environment:
        Variables:
          USERS_TABLE:  # Will resolve to: tokyo-real-estate-ai-users
            Fn::ImportValue: !Sub "${AIStackName}-UsersTableName"

  # API Gateway REST API
  FrontendRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: 'Unified Frontend API for Tokyo Real Estate'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Gateway Responses for CORS
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"

  # API Resources and Methods
  # /properties resource
  PropertiesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !GetAtt FrontendRestApi.RootResourceId
      PathPart: 'properties'

  PropertiesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref PropertiesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardAPIFunction.Arn}/invocations'

  PropertiesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref PropertiesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /favorites resources
  FavoritesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !GetAtt FrontendRestApi.RootResourceId
      PathPart: 'favorites'

  FavoritesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /favorites/user/{userId}
  FavoritesUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesResource
      PathPart: 'user'

  FavoritesUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesUserResource
      PathPart: '{userId}'

  FavoritesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesUserOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /favorites/{id}
  FavoritesIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesResource
      PathPart: '{id}'

  FavoritesDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesDeleteOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /favorites/compare for comparing multiple favorites
  FavoritesCompareResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesResource
      PathPart: 'compare'

  FavoritesComparePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesCompareResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesCompareOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesCompareResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /favorites/analysis for analysis endpoints
  FavoritesAnalysisBaseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesResource
      PathPart: 'analysis'

  # /favorites/analysis/{userEmail} for analysis endpoint
  FavoritesUserEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesAnalysisBaseResource
      PathPart: '{userEmail}'

  # /favorites/analysis/{userEmail}/{propertyId} for analysis endpoint
  FavoritesAnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref FavoritesUserEmailResource
      PathPart: '{propertyId}'

  FavoritesAnalysisGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesAnalysisResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userEmail: true
        method.request.path.propertyId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  FavoritesAnalysisOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref FavoritesAnalysisResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /hidden resources (same pattern as favorites)
  HiddenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !GetAtt FrontendRestApi.RootResourceId
      PathPart: 'hidden'

  HiddenPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref HiddenResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  HiddenOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref HiddenResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /hidden/user/{userId}
  HiddenUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref HiddenResource
      PathPart: 'user'

  HiddenUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref HiddenUserResource
      PathPart: '{userId}'

  HiddenGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref HiddenUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  HiddenUserOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref HiddenUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /hidden/{id}
  HiddenIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref HiddenResource
      PathPart: '{id}'

  HiddenDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref HiddenIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FavoritesAPIFunction.Arn}/invocations'

  HiddenDeleteOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref HiddenIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /auth resources
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !GetAtt FrontendRestApi.RootResourceId
      PathPart: 'auth'

  # /auth/register
  AuthRegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref AuthResource
      PathPart: 'register'

  AuthRegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref AuthRegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserFunction.Arn}/invocations'

  AuthRegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref AuthRegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # /auth/login
  AuthLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FrontendRestApi
      ParentId: !Ref AuthResource
      PathPart: 'login'

  AuthLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUserFunction.Arn}/invocations'

  AuthLoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FrontendRestApi
      ResourceId: !Ref AuthLoginResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Deployment
  FrontendApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PropertiesMethod
      - PropertiesOptionsMethod
      - FavoritesPostMethod
      - FavoritesOptionsMethod
      - FavoritesComparePostMethod
      - FavoritesCompareOptionsMethod
      - FavoritesGetMethod
      - FavoritesUserOptionsMethod
      - FavoritesDeleteMethod
      - FavoritesDeleteOptionsMethod
      - FavoritesAnalysisGetMethod
      - FavoritesAnalysisOptionsMethod
      - HiddenPostMethod
      - HiddenOptionsMethod
      - HiddenGetMethod
      - HiddenUserOptionsMethod
      - HiddenDeleteMethod
      - HiddenDeleteOptionsMethod
      - AuthRegisterMethod
      - AuthRegisterOptionsMethod
      - AuthLoginMethod
      - AuthLoginOptionsMethod
    Properties:
      RestApiId: !Ref FrontendRestApi
      Description: !Sub 'Frontend API Deployment ${AWS::StackId}'

  # API Gateway Stage
  FrontendApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref FrontendRestApi
      DeploymentId: !Ref FrontendApiDeployment
      StageName: 'prod'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50

  # Lambda permissions for API Gateway
  DashboardApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FrontendRestApi}/*/*'

  FavoritesApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FavoritesAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FrontendRestApi}/*/*'

  RegisterApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RegisterUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FrontendRestApi}/*/*'

  LoginApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoginUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FrontendRestApi}/*/*'

Outputs:
  BcryptLayerArn:
    Description: 'ARN of the Bcrypt layer'
    Value: !Ref BcryptLayer
    Export:
      Name: !Sub '${AWS::StackName}-BcryptLayerArn'

  FrontendApiEndpoint:
    Description: "Frontend API Gateway endpoint URL"
    Value: !Sub "https://${FrontendRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-api-endpoint"

  StaticSiteURL:
    Description: "S3 static website URL"
    Value: !Sub "http://${StaticSiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-static-site-url"

  S3BucketName:
    Description: "S3 bucket name for static files"
    Value: !Ref StaticSiteBucket
    Export:
      Name: !Sub "${AWS::StackName}-s3-bucket"

  DashboardAPIFunctionArn:
    Description: "Dashboard API Lambda function ARN"
    Value: !GetAtt DashboardAPIFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-dashboard-api-arn"

  FavoritesAPIFunctionArn:
    Description: "Favorites API Lambda function ARN"
    Value: !GetAtt FavoritesAPIFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-favorites-api-arn"

  RegisterUserFunctionArn:
    Description: "Register User Lambda function ARN"
    Value: !GetAtt RegisterUserFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-register-user-arn"

  LoginUserFunctionArn:
    Description: "Login User Lambda function ARN"
    Value: !GetAtt LoginUserFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-login-user-arn"