AWSTemplateFormatVersion: '2010-09-09'
Description: Real Estate Dashboard API Stack

Parameters:
  AIStackName:
    Type: String
    Default: tokyo-real-estate-ai
    Description: Name of the AI stack to import resources from
  DeploymentBucket:
    Type: String
    Description: S3 bucket for Lambda deployment packages
  DashboardAPICodeVersion:
    Type: String
    Default: latest
    Description: S3 object version for dashboard API code

Resources:
  # Dashboard API Lambda Function
  DashboardAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-dashboard-api'
      Runtime: python3.12
      Handler: app.lambda_handler
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: functions/dashboard_api.zip
        S3ObjectVersion: !Ref DashboardAPICodeVersion
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Fn::ImportValue: !Sub '${AIStackName}-DynamoDBTableName'
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt DashboardAPIRole.Arn

  # IAM Role for Dashboard API Lambda
  DashboardAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - Fn::ImportValue: !Sub '${AIStackName}-DynamoDBTableArn'
                  - !Sub 
                    - '${TableArn}/index/*'
                    - TableArn:
                        Fn::ImportValue: !Sub '${AIStackName}-DynamoDBTableArn'

  # API Gateway REST API
  DashboardAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: Real Estate Dashboard API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  PropertiesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DashboardAPI
      ParentId: !GetAtt DashboardAPI.RootResourceId
      PathPart: properties

  # API Gateway Method - GET
  PropertiesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DashboardAPI
      ResourceId: !Ref PropertiesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardAPIFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Method - OPTIONS (for CORS)
  PropertiesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DashboardAPI
      ResourceId: !Ref PropertiesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permission for API Gateway
  APIGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DashboardAPI}/*/*'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PropertiesGetMethod
      - PropertiesOptionsMethod
    Properties:
      RestApiId: !Ref DashboardAPI
      StageName: prod

  # S3 Bucket for hosting dashboard HTML
  DashboardBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-dashboard-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for public read access
  DashboardBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DashboardBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub '${DashboardBucket.Arn}/*'

Outputs:
  DashboardAPIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${DashboardAPI}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  DashboardWebsiteURL:
    Description: Dashboard website URL
    Value: !GetAtt DashboardBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  DashboardBucketName:
    Description: S3 bucket name for dashboard hosting
    Value: !Ref DashboardBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  DashboardAPIFunctionArn:
    Description: Dashboard API Lambda function ARN
    Value: !GetAtt DashboardAPIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-APIFunctionArn'