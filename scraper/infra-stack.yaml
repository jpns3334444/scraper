AWSTemplateFormatVersion: "2010-09-09"
Description: "Scraper Infrastructure - IAM Roles, Security Group, SNS"

Parameters:
  MyIPv4:
    Type: String
    Description: Your IPv4 address in CIDR (e.g. 203.0.113.1/32)
  MyIPv6:
    Type: String
    Description: Your IPv6 address in CIDR (e.g. 2400:abcd::1234/128)
  OutputBucket:
    Type: String
    Description: S3 bucket to upload scraper results to
    Default: "tokyo-real-estate-ai-data"
  NotificationEmail:
    Type: String
    Default: ""
    Description: Email address for scraper notifications (optional)
  NotificationEnabled:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Whether to enable email notifications

Conditions:
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, ""]]
  ShouldEnableNotifications: !Equals [!Ref NotificationEnabled, "true"]

Resources:
  ScraperNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: ShouldEnableNotifications
    Properties:
      TopicName: scraper-notifications
      DisplayName: Scraper Job Notifications

  ScraperNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      Protocol: email
      TopicArn: !Ref ScraperNotificationTopic
      Endpoint: !Ref NotificationEmail

  ScraperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AllowS3Upload
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${OutputBucket}/scraper-output/*
                  - !Sub arn:aws:s3:::${OutputBucket}/raw/*
        - PolicyName: AllowCloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: AllowSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:github-token*"
        - PolicyName: AllowCloudWatchMetrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  ScraperInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref ScraperRole]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSSMSendCommand
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: "*"
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: LambdaSNSPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ScraperNotificationTopic
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ScraperSessionStateTable.Arn
                  - !Sub "${ScraperSessionStateTable.Arn}/index/*"
        - PolicyName: LambdaStepFunctionsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:StopExecution
                Resource: !Ref StealthScraperStateMachine

  ScraperSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH only from your IPs
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIPv4
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: !Ref MyIPv6

  # DynamoDB table for session state management
  ScraperSessionStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scraper-session-state
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: date_key
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: date_key
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: date-index
          KeySchema:
            - AttributeName: date_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Purpose
          Value: ScraperStealthMode
        - Key: Component
          Value: SessionState

  # Step Functions State Machine for orchestration
  StealthScraperStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: stealth-scraper-orchestrator
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Stealth scraper orchestration with behavioral mimicry",
          "StartAt": "InitializeSession",
          "States": {
            "InitializeSession": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${InitializeSessionFunction}",
                "Payload.$": "$"
              },
              "ResultPath": "$.sessionData",
              "Next": "CheckSessionState"
            },
            "CheckSessionState": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.sessionData.Payload.should_proceed",
                  "BooleanEquals": true,
                  "Next": "SessionReady"
                }
              ],
              "Default": "SessionSkipped"
            },
            "SessionReady": {
              "Type": "Pass",
              "Result": "Session initialized and ready for scraping",
              "End": true
            },
            "SessionSkipped": {
              "Type": "Pass",
              "Result": "Session skipped - already completed for today",
              "End": true
            }
          }
        }

  # IAM Role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt InitializeSessionFunction.Arn
                  - !GetAtt UpdateSessionFunction.Arn

  # Lambda function for session initialization
  InitializeSessionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: stealth-initialize-session
      Handler: index.lambda_handler
      Role: !GetAtt SessionLambdaRole.Arn
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ScraperSessionStateTable
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import time
          from datetime import datetime, timezone
          from decimal import Decimal

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])

          def lambda_handler(event, context):
              """Initialize session and check if scraping should proceed"""
              
              session_id = event.get('session_id', f"session-{int(time.time())}")
              date_key = datetime.now(timezone.utc).strftime('%Y-%m-%d')
              max_properties = event.get('max_properties', 8)
              
              try:
                  # Check if session already completed today
                  response = table.get_item(
                      Key={
                          'session_id': session_id,
                          'date_key': date_key
                      }
                  )
                  
                  if 'Item' in response:
                      item = response['Item']
                      if item.get('status') == 'completed':
                          return {
                              'session_id': session_id,
                              'date_key': date_key,
                              'should_proceed': False,
                              'reason': 'Session already completed today',
                              'properties_scraped': int(item.get('properties_scraped', 0))
                          }
                  
                  # Initialize or update session
                  ttl = int(time.time()) + (7 * 24 * 60 * 60)  # 7 days TTL
                  
                  session_data = {
                      'session_id': session_id,
                      'date_key': date_key,
                      'status': 'initialized',
                      'max_properties': max_properties,
                      'properties_scraped': 0,
                      'start_time': datetime.now(timezone.utc).isoformat(),
                      'last_updated': datetime.now(timezone.utc).isoformat(),
                      'ttl': ttl
                  }
                  
                  table.put_item(Item=session_data)
                  
                  return {
                      'session_id': session_id,
                      'date_key': date_key,
                      'should_proceed': True,
                      'max_properties': max_properties,
                      'session_data': session_data
                  }
                  
              except Exception as e:
                  print(f"Error initializing session: {str(e)}")
                  return {
                      'session_id': session_id,
                      'date_key': date_key,
                      'should_proceed': False,
                      'error': str(e)
                  }

  # Lambda function for session state updates
  UpdateSessionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: stealth-update-session
      Handler: index.lambda_handler
      Role: !GetAtt SessionLambdaRole.Arn
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ScraperSessionStateTable
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime, timezone

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])

          def lambda_handler(event, context):
              """Update session state after scraping completion"""
              
              session_data = event.get('sessionData', {}).get('Payload', {})
              scraper_result = event.get('scraperResult', {}).get('Payload', {})
              
              session_id = session_data.get('session_id')
              date_key = session_data.get('date_key')
              
              if not session_id or not date_key:
                  return {'error': 'Missing session_id or date_key'}
              
              try:
                  # Determine final status based on scraper result
                  status = 'completed' if scraper_result.get('statusCode') == 200 else 'failed'
                  
                  # Extract properties count from scraper result
                  body = json.loads(scraper_result.get('body', '{}'))
                  properties_scraped = body.get('properties_scraped', 0)
                  
                  # Update session
                  table.update_item(
                      Key={
                          'session_id': session_id,
                          'date_key': date_key
                      },
                      UpdateExpression='SET #status = :status, properties_scraped = :props, end_time = :end_time, last_updated = :updated, scraper_result = :result',
                      ExpressionAttributeNames={
                          '#status': 'status'
                      },
                      ExpressionAttributeValues={
                          ':status': status,
                          ':props': properties_scraped,
                          ':end_time': datetime.now(timezone.utc).isoformat(),
                          ':updated': datetime.now(timezone.utc).isoformat(),
                          ':result': scraper_result
                      }
                  )
                  
                  return {
                      'session_id': session_id,
                      'status': status,
                      'properties_scraped': properties_scraped,
                      'updated': True
                  }
                  
              except Exception as e:
                  print(f"Error updating session: {str(e)}")
                  return {'error': str(e)}

  # IAM Role for session management Lambda functions
  SessionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt ScraperSessionStateTable.Arn
                  - !Sub "${ScraperSessionStateTable.Arn}/index/*"

Outputs:
  ScraperRoleArn:
    Description: "ARN of the IAM role for scraper EC2 instances"
    Value: !GetAtt ScraperRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ScraperRoleArn"

  ScraperInstanceProfileName:
    Description: "Name of the instance profile for scraper EC2 instances"
    Value: !Ref ScraperInstanceProfile
    Export:
      Name: !Sub "${AWS::StackName}-ScraperInstanceProfileName"

  LambdaExecutionRoleArn:
    Description: "ARN of the IAM role for Lambda functions"
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaExecutionRoleArn"

  ScraperSecurityGroupId:
    Description: "ID of the security group for scraper EC2 instances"
    Value: !Ref ScraperSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ScraperSecurityGroupId"

  ScraperNotificationTopicArn:
    Description: "ARN of the SNS topic for scraper notifications"
    Value: !Ref ScraperNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-ScraperNotificationTopicArn"

  SessionStateTableName:
    Description: "DynamoDB table name for session state"
    Value: !Ref ScraperSessionStateTable
    Export:
      Name: !Sub "${AWS::StackName}-SessionStateTableName"

  SessionStateTableArn:
    Description: "DynamoDB table ARN for session state"
    Value: !GetAtt ScraperSessionStateTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SessionStateTableArn"

  StepFunctionsStateMachineArn:
    Description: "Step Functions state machine ARN"
    Value: !Ref StealthScraperStateMachine
    Export:
      Name: !Sub "${AWS::StackName}-StepFunctionsArn"

  InitializeSessionFunctionArn:
    Description: "Initialize session Lambda function ARN"
    Value: !GetAtt InitializeSessionFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InitializeSessionFunctionArn"

  UpdateSessionFunctionArn:
    Description: "Update session Lambda function ARN"
    Value: !GetAtt UpdateSessionFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UpdateSessionFunctionArn"